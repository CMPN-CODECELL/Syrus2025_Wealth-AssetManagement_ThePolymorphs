{
  "_id": "894324d6-df32-4294-bc7a-16ee3e271442",
  "aiPersonaId": "8c1f2df4-2053-4020-8cb8-3b77757a6f4d",
  "integrationId": "ma-stock-market-data-analysis-7242-primary-workflow-for-financial-market-analysis",
  "isMiniAgentPrimaryWorkflow": true,
  "name": "Primary Workflow for Financial Market Analysis",
  "publisherAccountId": "c7fc4684-139f-4cf7-a9e5-10f08cfed9b0",
  "startTaskId": "0b736081-f319-4bc9-a176-c70311bd1bd5",
  "status": "Active",
  "tasks": [
    {
      "_id": "0b736081-f319-4bc9-a176-c70311bd1bd5",
      "type": "PassThrough",
      "config": {
        "name": "Pass Through",
        "description": "Pass through the input to the output"
      },
      "transitions": [
        {
          "_id": "541bed9b-9519-464b-96e4-89a4b95035c3-0b736081-f319-4bc9-a176-c70311bd1bd5",
          "nextTask": "541bed9b-9519-464b-96e4-89a4b95035c3",
          "name": "If query doesnt exists",
          "rules": [
            {
              "type": "any",
              "operator": "notExists",
              "path": "$output.query"
            }
          ]
        },
        {
          "_id": "198ace2f-e08f-48d5-a75b-1041122df807-0b736081-f319-4bc9-a176-c70311bd1bd5",
          "nextTask": "198ace2f-e08f-48d5-a75b-1041122df807",
          "name": "If intents are already classified",
          "rules": [
            {
              "type": "any",
              "operator": "exists",
              "path": "$output.intents"
            },
            {
              "type": "any",
              "operator": "exists",
              "path": "$output.query"
            }
          ]
        },
        {
          "_id": "0b736081-f319-4bc9-a176-c70311bd1bd5-c08d1f59-294d-44a8-b0b5-65ba4199ac5b",
          "name": "If query exists",
          "nextTask": "c08d1f59-294d-44a8-b0b5-65ba4199ac5b",
          "rules": [
            {
              "type": "any",
              "operator": "exists",
              "path": "$output.query"
            },
            {
              "type": "any",
              "operator": "notExists",
              "path": "$output.intents"
            }
          ]
        }
      ],
      "globalVariables": [
        {
          "name": "query",
          "referencePath": "$input.query"
        },
        {
          "name": "rawQuery",
          "referencePath": "$input.rawQuery"
        },
        {
          "name": "conversationId",
          "referencePath": "$input.conversationId"
        }
      ]
    },
    {
      "_id": "541bed9b-9519-464b-96e4-89a4b95035c3",
      "type": "Input",
      "config": {
        "name": "User Input",
        "description": "Get user input",
        "type": "string"
      },
      "transitions": [
        {
          "_id": "541bed9b-9519-464b-96e4-89a4b95035c3-c08d1f59-294d-44a8-b0b5-65ba4199ac5b",
          "name": "Default",
          "nextTask": "c08d1f59-294d-44a8-b0b5-65ba4199ac5b"
        }
      ],
      "globalVariables": [
        {
          "name": "query",
          "referencePath": "$output.userInput"
        },
        {
          "name": "rawQuery",
          "referencePath": "$output.userInput"
        },
        {
          "name": "selfLoopMiniAgent",
          "referencePath": "true"
        }
      ]
    },
    {
      "_id": "c08d1f59-294d-44a8-b0b5-65ba4199ac5b",
      "type": "Loader",
      "config": {
        "name": "Loader",
        "description": "Display loader message",
        "type": "loader",
        "text": "Just a moment... identifying the best approach to assist you."
      },
      "transitions": [
        {
          "_id": "c08d1f59-294d-44a8-b0b5-65ba4199ac5b-7f05b7b0-02ca-438c-8b00-a8b261c3a807",
          "name": "Default",
          "nextTask": "7f05b7b0-02ca-438c-8b00-a8b261c3a807"
        }
      ]
    },
    {
      "_id": "7f05b7b0-02ca-438c-8b00-a8b261c3a807",
      "type": "IntentClassification",
      "config": {
        "name": "Intent Classification",
        "description": "Classify the intent of the user message",
        "modelId": "56feb720-adb7-464a-8e6b-fd79a510ba5b",
        "intents": [
          {
            "name": "Stock Symbol Processing",
            "description": "Purpose:\n\nThis intent is responsible for handling queries that require fetching detailed market data for a list of stock symbols. Unlike the previous version—which focused on a single symbol—this updated intent processes multiple stock symbols collected by the \"Top Gainers and Loser Stocks\" intent. For each symbol in the list, the intent makes API requests to retrieve the latest market data, including real-time pricing, historical performance, volume, and other key performance indicators. This data will then be used to generate investment recommendations or portfolio analyses.\n\nFlow of Execution:\n\nInput Extraction & Validation:\n\nThe intent begins by verifying that a valid list of stock symbols is available. These symbols are either directly provided by the user or extracted from the content variable populated by the preceding \"Top Gainers and Loser Stocks\" intent.\n\nIf the list is empty or contains invalid symbols, the agent prompts the user for clarification.\n\nAPI Request Initiation:\n\nOnce a valid list is confirmed, the intent initiates API requests for each stock symbol in parallel (or sequentially, based on system design).\n\nEach API request targets the stock market API to retrieve the latest data for its corresponding symbol. This includes real-time pricing, historical data, volume, and other critical performance metrics.\n\nData Processing:\n\nThe responses from the API are parsed and processed individually.\n\nFor each symbol, necessary calculations (such as percentage changes, averages, or other indicators) and data formatting are performed to prepare the market data for further analysis or display.\n\nThe processed data for all symbols is consolidated to form a comprehensive dataset.\n\nWorkflow Integration:\n\nAfter processing, the intent triggers additional workflows within the AI Agent. For example, the aggregated data can be passed to a recommendation generation module or a visualization tool that displays performance trends.\n\nThis integration ensures a seamless transition from data retrieval to delivering actionable investment insights.\n\nIntegration with Other Intents:\n\nPreceding Intent:\nThis \"Stock Data Processing\" intent is designed to execute immediately after the \"Top Gainers and Loser Stocks\" intent. The earlier intent collects and provides the list of stock symbols, which is then used as the input for this intent.\n\nSubsequent Workflows:\nOnce the market data is processed, the resulting dataset can be routed to other modules—for instance, for generating personalized investment guidance or performing portfolio analysis—ensuring that the agent leverages up-to-date and relevant market information.",
            "examples": [
              "Show me the latest market data for the top gainers and losers",
              "an you fetch detailed stock information for all the symbols from the top gainers and losers list?",
              "I need real-time pricing, volume, and historical data for the stocks identified as top gainers and losers.",
              "Retrieve the market details for the stocks we discussed in the Top Gainers and Losers intent.",
              "Get me an analysis of all the stock symbols from the top gainers and losers report."
            ]
          },
          {
            "name": "Top Gainers and Loser Stocks",
            "description": "Purpose:\nThis intent is designed to handle queries that request a list of both top-performing (gainers) and losing (declining) stocks. It fetches stock performance data from a dedicated API, which can then be used by subsequent intents (such as the Stock Symbol Processing intent) to process detailed market data for a specific stock.\n\nFlow of Execution:\n1. Input Handling:\nThe intent recognizes queries related to identifying both leading gainers and biggest losers in the market.\n\nIt validates any user inputs or parameters that might help refine the search criteria (e.g., market sector, time frame, performance metrics).\n\n2. API Request Initiation:\nUpon validating the input, the intent makes an API call to retrieve both top gainers and top losers based on stock performance.\n\nThe API returns a list of stocks along with key performance metrics, such as growth/decline percentages, trading volumes, and market capitalization.\n\n3. Data Processing and Formatting:\nThe returned data is parsed and filtered to highlight both the best-performing and worst-performing stocks.\n\nThe intent organizes this information into a structured format that can be easily consumed by the AI Agent or passed on to other intents.\n\n4. Content Variable Setting:\nThe intent sets a content variable with the selected top-performing and top-losing stock(s).\n\nThis variable is crucial for enabling subsequent intents (like Stock Symbol Processing) to automatically reference the relevant stock symbol if not explicitly provided by the user.\n\n5. Response Generation:\nThe intent generates a response summarizing both top gainers and top losers in the stock market.\n\nIf required, it prompts the user to select a stock for more detailed analysis.\n\nAdditionally, it may offer contextual insights on why certain stocks are performing well or poorly (e.g., market news, earnings reports, economic trends).\n\nIntegration with Other Intents:\nThe Top Performing & Losing Stocks intent serves as the initial step in a broader workflow, setting the stage for deeper analysis by subsequent intents.\n\nAfter retrieving the top gainers/losers, the agent can delegate the processing of a specific stock’s data to the Stock Symbol Processing intent, using the content variable set in this step.\n\nThe data can also be used by portfolio management sub-agents to recommend investment strategies based on market trends.\n\nThis updated intent ensures a comprehensive market overview, allowing the AI Agent to analyze both profitable opportunities and potential risks in stock investments.",
            "examples": [
              "What are the top performing stocks right now?",
              "Show me the market leaders in stock performance.",
              "Can you fetch the stocks with the highest growth percentages today?",
              "What are the top performing tech stocks currently?"
            ]
          }
        ],
        "query": "$agent.query"
      },
      "transitions": [
        {
          "_id": "7f05b7b0-02ca-438c-8b00-a8b261c3a807-198ace2f-e08f-48d5-a75b-1041122df807",
          "name": "If Intent is Matched",
          "rules": [
            {
              "type": "string",
              "operator": "equal",
              "path": "$output.intentMatched",
              "value": "true"
            }
          ],
          "nextTask": "198ace2f-e08f-48d5-a75b-1041122df807"
        },
        {
          "_id": "7f05b7b0-02ca-438c-8b00-a8b261c3a807-8e922096-4a8f-4abc-94f9-c5a3ccdaab6c",
          "name": "If No Intent is Matched",
          "rules": [
            {
              "type": "string",
              "operator": "equal",
              "path": "$output.intentMatched",
              "value": "false"
            }
          ],
          "nextTask": "8e922096-4a8f-4abc-94f9-c5a3ccdaab6c"
        }
      ]
    },
    {
      "_id": "198ace2f-e08f-48d5-a75b-1041122df807",
      "type": "JSFunction",
      "config": {
        "name": "JS Function",
        "description": "Execute JS function",
        "code": "\nconst main = () => {\n    const currentExecutionId = _id;\n    const intents = agent?.icIntents?.[currentExecutionId] || input.intents;\n    const currentIndex = agent?.icLoopIndexes?.[currentExecutionId] || 0;\n    const currentIntent = intents[currentIndex] || {};\n    const { intent, task } = currentIntent;\n    const state = currentIndex === intents.length ? 'end' : 'continue'\n    const icLoopIndexes = { ...(agent?.icLoopIndexes || {}), [_id]: state === 'end' ? undefined : currentIndex + 1 };\n    const icIntents = { ...(agent?.icIntents || {}), [_id]: state === 'end' ? undefined : intents };\n    return { ...input, intent, state: currentIndex === intents.length ? 'end' : 'continue', icLoopIndexes, icIntents, query: task };\n};\n\nmain()\n"
      },
      "globalVariables": [
        {
          "referencePath": "$output.icLoopIndexes",
          "name": "icLoopIndexes"
        },
        {
          "referencePath": "$output.icIntents",
          "name": "icIntents"
        }
      ],
      "transitions": [
        {
          "_id": "198ace2f-e08f-48d5-a75b-1041122df807-14a45e41-d7f7-4a3d-b79e-5193c5965490",
          "name": "If Intent is Matched",
          "rules": [
            {
              "type": "string",
              "operator": "equal",
              "path": "$output.intent",
              "value": "Stock Symbol Processing"
            }
          ],
          "nextTask": "14a45e41-d7f7-4a3d-b79e-5193c5965490"
        },
        {
          "_id": "198ace2f-e08f-48d5-a75b-1041122df807-f8d7b025-787a-4e0a-9d8d-039363f53fb2",
          "name": "If Intent is Matched",
          "rules": [
            {
              "type": "string",
              "operator": "equal",
              "path": "$output.intent",
              "value": "Top Gainers and Loser Stocks"
            }
          ],
          "nextTask": "f8d7b025-787a-4e0a-9d8d-039363f53fb2"
        },
        {
          "_id": "198ace2f-e08f-48d5-a75b-1041122df807-541bed9b-9519-464b-96e4-89a4b95035c3",
          "name": "If Self Loop",
          "rules": [
            {
              "type": "string",
              "operator": "equal",
              "path": "$agent.selfLoopMiniAgent",
              "value": "true"
            },
            {
              "type": "string",
              "operator": "equal",
              "path": "$output.state",
              "value": "end"
            }
          ],
          "nextTask": "541bed9b-9519-464b-96e4-89a4b95035c3"
        }
      ]
    },
    {
      "_id": "14a45e41-d7f7-4a3d-b79e-5193c5965490",
      "type": "Workflow",
      "config": {
        "name": "Intent - Stock Symbol Processing",
        "description": "Workflow for intent - Stock Symbol Processing",
        "workflowId": "be110687-d250-446e-8908-d2cd19a236d9"
      },
      "transitions": [
        {
          "_id": "14a45e41-d7f7-4a3d-b79e-5193c5965490-198ace2f-e08f-48d5-a75b-1041122df807",
          "name": "Mini agent execution completed",
          "nextTask": "198ace2f-e08f-48d5-a75b-1041122df807"
        }
      ]
    },
    {
      "_id": "f8d7b025-787a-4e0a-9d8d-039363f53fb2",
      "type": "Workflow",
      "config": {
        "name": "Intent - Top Gainers and Loser Stocks",
        "description": "Workflow for intent - Top Gainers and Loser Stocks",
        "workflowId": "6c8c9acf-ef21-48dd-bf8a-01ac730c99b1"
      },
      "transitions": [
        {
          "_id": "f8d7b025-787a-4e0a-9d8d-039363f53fb2-198ace2f-e08f-48d5-a75b-1041122df807",
          "name": "Mini agent execution completed",
          "nextTask": "198ace2f-e08f-48d5-a75b-1041122df807"
        }
      ]
    },
    {
      "_id": "8e922096-4a8f-4abc-94f9-c5a3ccdaab6c",
      "transitions": [
        {
          "_id": "8e922096-4a8f-4abc-94f9-c5a3ccdaab6c-541bed9b-9519-464b-96e4-89a4b95035c3",
          "name": "If Self Loop",
          "rules": [
            {
              "type": "string",
              "operator": "equal",
              "path": "$agent.selfLoopMiniAgent",
              "value": "true"
            }
          ],
          "nextTask": "541bed9b-9519-464b-96e4-89a4b95035c3"
        }
      ],
      "type": "Output",
      "config": {
        "name": "Output",
        "description": "Output the response to the user",
        "type": "external",
        "text": "Unable to complete task $agent.query"
      }
    },
    {
      "_id": "1567cc51-3dc1-43a2-b417-b03f0cad308c",
      "transitions": [
        {
          "_id": "1567cc51-3dc1-43a2-b417-b03f0cad308c-541bed9b-9519-464b-96e4-89a4b95035c3",
          "name": "If Self Loop",
          "rules": [
            {
              "type": "string",
              "operator": "equal",
              "path": "$agent.selfLoopMiniAgent",
              "value": "true"
            }
          ],
          "nextTask": "541bed9b-9519-464b-96e4-89a4b95035c3"
        }
      ],
      "type": "Display",
      "config": {
        "name": "Display",
        "description": "Display the response to the user",
        "type": "text",
        "text": "$input.content"
      }
    }
  ],
  "type": "Conversational",
  "version": "latest"
}